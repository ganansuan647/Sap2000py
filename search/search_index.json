{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Sap2000py Docs","text":"Project Information <p>For detailed information about this project please check here</p>"},{"location":"#install","title":"Install","text":"<ul> <li><code>pip install sap2000py</code> - Install Sap2000py module.</li> <li><code>from Sap2000py import Saproject</code> - Import Saproject.</li> <li><code>Sap = Saproject()</code> - Create an instance of Saproject.</li> <li><code>Sap.openSap()</code> - Open Sap2000 program.</li> </ul>"},{"location":"#sap2000py-project-layout","title":"Sap2000py Project layout","text":"<pre><code>Sap2000py\n\u251c\u2500\u2500 Bridge\n\u2502   \u251c\u2500\u2500 Continuous_Bridge.py\n\u2502   \u2514\u2500\u2500 SapBridge.py\n\u251c\u2500\u2500 Scripts\n\u2502   \u251c\u2500\u2500 Add_Joints.py\n\u2502   \u251c\u2500\u2500 Analyze.py\n\u2502   \u251c\u2500\u2500 Build_Continuous_Bridge.py\n\u2502   \u251c\u2500\u2500 Build_Model.py\n\u2502   \u251c\u2500\u2500 Common_Material_Set.py\n\u2502   \u251c\u2500\u2500 extract_polygon_from_dxf.py\n\u2502   \u251c\u2500\u2500 GetResults.py\n\u2502   \u2514\u2500\u2500 Group.py\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 SapConstraints.py\n\u251c\u2500\u2500 SapDeal.py\n\u251c\u2500\u2500 Sapfunctions.py\n\u251c\u2500\u2500 Sapload.py\n\u251c\u2500\u2500 SapMaterial.py\n\u251c\u2500\u2500 SapObj.py\n\u251c\u2500\u2500 Sapproject.py\n\u2514\u2500\u2500 SapSection.py\n</code></pre>"},{"location":"Examples/BasicUsage/","title":"Sap2000py","text":"<p>Sap2000py is a python module to interact with Sap2000 API</p> <p>This Demo below shows how to interact with SAP2000 using the Sap2000py library. The project includes complete examples of creating and manipulating SAP2000 models, running analyses, and exporting results to Excel.</p>"},{"location":"Examples/BasicUsage/#documents","title":"Documents","text":"<p>You can find the latest documentation here</p> <p>Or you can find documents for all versions here.</p>"},{"location":"Examples/BasicUsage/#contents","title":"Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Setting the Model Path</li> <li>Creating and Opening a SAP2000 Project</li> <li>Model Information</li> <li>Adding Materials and Elements</li> <li>Analysis</li> <li>Post-processing</li> <li>Saving and Closing</li> <li>Dependencies</li> </ul>"},{"location":"Examples/BasicUsage/#installation","title":"Installation","text":"<p>Using pip:</p> <pre><code>pip install Sap2000py\n</code></pre>"},{"location":"Examples/BasicUsage/#usage","title":"Usage","text":"<p>Below are detailed instructions for using <code>Sap2000pyDemo.py</code>.</p>"},{"location":"Examples/BasicUsage/#setting-the-model-path","title":"Setting the Model Path","text":"<p>At the beginning of the script, set the path to your model file:</p> <pre><code>from pathlib import Path\n#full path to the model\nModelPath = Path('.\\Test\\Test.sdb')\n</code></pre>"},{"location":"Examples/BasicUsage/#creating-and-opening-a-sap2000-project","title":"Creating and Opening a SAP2000 Project","text":"<p>Create a Sap2000py object and open the SAP2000 program:</p> <pre><code>from Sap2000py import Saproject\n\nSap = Saproject()\nSap.openSap()\nSap.File.Open(ModelPath)\n</code></pre>"},{"location":"Examples/BasicUsage/#model-information","title":"Model Information","text":"<p>Get basic information about your SAP2000 project:</p> <pre><code>Sap.getSapVersion()\nSap.getProjectInfo()\nSap.getUnits()\n</code></pre> <p>Make changes to the model: <pre><code># Set the project information with field and value\nSap.setProjectInfo(\"Author\",\"Gou Lingyun\")\nSap.setProjectInfo(\"Description\",\"This is a test model\")\n\n# or you can set project information with a dictionary\nSap.setProjectInfo(info_dict={\"Author\":\"Gou Lingyun\",\"Description\":\"This is a test model\"})\n\n# Set the units of the model\nSap.setUnits(\"KN_m_C\")\n</code></pre></p>"},{"location":"Examples/BasicUsage/#adding-materials-and-elements","title":"Adding Materials and Elements","text":"<p>Add materials and elements to the model:</p> <pre><code># Add China Common Material Set\u00b7\nSap.Scripts.AddCommonMaterialSet(standard = \"JTG\")\n\n# Add Joints and Elements\njoint_coord = np.array([[0,0,0], [10,0,0], [20,0,0], [30,0,0]])\nSap.Scripts.AddJoints(joint_coord)\nSap.Scripts.AddElements([[1,2], [2,3], [3,4]])\n</code></pre>"},{"location":"Examples/BasicUsage/#analysis","title":"Analysis","text":"<p>Run a modal analysis:</p> <pre><code>Sap.Scripts.Analyze.RemoveCases(\"All\")\nSap.Scripts.Analyze.AddCases(Casename = ['DEAD', 'MODAL'])\nSap.Scripts.Analyze.RunAll()\n</code></pre>"},{"location":"Examples/BasicUsage/#post-processing","title":"Post-processing","text":"<p>Export analysis results to an Excel file:</p> <p>note: the following code is just an example, you can modify it according to your needs. <pre><code>filename = 'F:\\\\python\\\\Sap2000\\\\Models\\\\Test.xlsx'\nwb = openpyxl.load_workbook(filename)\nws = wb.worksheets[0]\n\nSap.Scripts.SelectCombo_Case([\"DEAD\"])\nName, EleAbsForce, __, __ = Sap.Scripts.GetResults.ElementJointForce_by_Group(\"PierBottom\")\nSap.Scripts.writecell(ws, EleAbsForce[:,[2]], \"D22\")\n\nwb.save(filename)\n</code></pre></p>"},{"location":"Examples/BasicUsage/#saving-and-closing","title":"Saving and Closing","text":"<p>Save the project and close the SAP2000 program:</p> <pre><code>Sap.File.Save()\nSap.closeSap()\n</code></pre>"},{"location":"Examples/BasicUsage/#dependencies","title":"Dependencies","text":"<ul> <li>python&gt;=3.9</li> </ul> <p>This project requires the following Python libraries:</p> <ul> <li>numpy</li> <li>os</li> <li>openpyxl</li> <li>comtypes&gt;=1.1.11</li> <li>itertools</li> <li>rich</li> <li>loguru</li> <li>pathlib</li> <li>json</li> <li>sectionproperties&gt;=3.3.0</li> </ul> <p>For more information, please check Sap2000py Demo and Build Continuous Bridge Demo.</p>"},{"location":"Sap2000py/Saproject/Saproject/","title":"Saproject:\u91cd\u4e2d\u4e4b\u91cd","text":"<p>SAP2000 project class.</p> <p>This class encapsulates the SAP2000 API, providing various methods to interact with and manipulate SAP2000 models. It follows the singleton pattern enforced by the <code>SapMeta</code> metaclass, ensuring only one instance of this class can be created.</p> <p>Classes:</p> Name Description <code>File</code> <p>An instance of the <code>SapFile</code> class to handle file operations.</p> <code>Define</code> <p>An instance of the <code>SapDefinitions</code> class to manage model definitions.</p> <code>Assign</code> <p>An instance of the <code>SapAssign</code> class to assign properties to model objects.</p> <code>Analyze</code> <p>An instance of the <code>SapAnalyze</code> class to perform analyses.</p> <code>Results</code> <p>An instance of the <code>SapResults</code> class to retrieve analysis results.</p> <code>Scripts</code> <p>An instance of the <code>SapScripts</code> class that provides access to additional script-based functionalities.</p> <p>Attributes:</p> Name Type Description <code>_Object</code> <p>A reference to the SAP2000 application object.</p> <code>_Model</code> <p>A reference to the SAP2000 model object.</p> <code>SapVersion</code> <p>Returns the current SAP2000 program version.</p> <code>ProjectInfo</code> <p>Returns the project information as a dictionary.</p> <code>FilePath</code> <p>Returns the file path of the current model.</p> <code>FileName</code> <p>Returns the file name of the current model.</p> <code>CoordSystem</code> <p>Returns the name of the present coordinate system.</p> <code>Unitdict</code> <p>Returns a dictionary mapping unit names to unit IDs.</p> <code>Unitdict_rev</code> <p>Returns a dictionary mapping unit IDs to unit names.</p> <code>Objectdict</code> <p>Returns a dictionary mapping object types to IDs.</p> <code>Unitid</code> <p>Returns the unit ID of the current SAP2000 model.</p> <code>Units</code> <p>Returns the unit name of the current SAP2000 model.</p> <code>is_locked</code> <p>Checks if the model is locked.</p> <p>Methods:</p> Name Description <code>createSap</code> <p>Opens the SAP2000 program and initializes the API instance.</p> <code>openSap</code> <p>Starts the SAP2000 application and initializes a new model.</p> <code>closeSap</code> <p>Closes the SAP2000 program.</p> <code>lockModel</code> <p>Locks the current model.</p> <code>unlockModel</code> <p>Unlocks the current model.</p> <code>getUnits</code> <p>Logs and returns the units and unit ID of the current model.</p> <code>setUnits</code> <p>Sets the units of the current SAP2000 model.</p> <code>getSapVersion</code> <p>Logs and returns the current SAP2000 program version.</p> <code>getProjectInfo</code> <p>Logs the project information.</p> <code>setProjectInfo</code> <p>Sets the project information fields.</p> <code>setDefaultProjectInfo</code> <p>Sets the default project information.</p> <code>getFileName</code> <p>Logs and returns the file name of the current model.</p> <code>getCoordSystem</code> <p>Logs and returns the name of the present coordinate system.</p> <code>RefreshView</code> <p>Refreshes the view window.</p> Example <p>The following example demonstrates how to use the Saproject class:</p> <pre><code>from pathlib import Path\nfrom Sap2000py import Saproject\n\nSap = Saproject()\nSap.openSap()\nSap.File.New_Blank()\nSap.File.Open(Path('.') / \"Test\" / \"Test.sdb\")\n\nprint(Sap.Units)\nSap.getUnits()\n\nprint(Sap.SapVersion)\nSap.getSapVersion()\n\nSap.setProjectInfo(field=\"Company Name\", value=\"Tongji University\")\nSap.setProjectInfo(\"Author\", \"Gou Lingyun\")\nSap.setProjectInfo(\"Email\", \"gulangyu@tongji.edu.cn\")\nprint(Sap.ProjectInfo)\nSap.getProjectInfo()\n\nprint(Sap.FileName)\nSap.getFileName()\n\nprint(Sap.CoordSystem)\nSap.getCoordSystem()\n\n# Test setting units\nSap.setUnits(\"KN_m_E\")  # This will log an error as \"KN_m_E\" is not a supported unit\nSap.setUnits(\"KN_m_C\")  # This will successfully change the units to KN_m_C\n</code></pre> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>class Saproject(metaclass=SapMeta):\n    \"\"\"SAP2000 project class.\n\n    This class encapsulates the SAP2000 API, providing various methods to\n    interact with and manipulate SAP2000 models. It follows the singleton\n    pattern enforced by the `SapMeta` metaclass, ensuring only one instance\n    of this class can be created.\n\n    Classes:\n        File: An instance of the `SapFile` class to handle file operations.\n        Define: An instance of the `SapDefinitions` class to manage model\n            definitions.\n        Assign: An instance of the `SapAssign` class to assign properties to\n            model objects.\n        Analyze: An instance of the `SapAnalyze` class to perform analyses.\n        Results: An instance of the `SapResults` class to retrieve analysis\n            results.\n        Scripts: An instance of the `SapScripts` class that provides access\n            to additional script-based functionalities.\n\n    Attributes:\n        _Object: A reference to the SAP2000 application object.\n        _Model: A reference to the SAP2000 model object.\n        SapVersion: Returns the current SAP2000 program version.\n        ProjectInfo: Returns the project information as a dictionary.\n        FilePath: Returns the file path of the current model.\n        FileName: Returns the file name of the current model.\n        CoordSystem: Returns the name of the present coordinate system.\n        Unitdict: Returns a dictionary mapping unit names to unit IDs.\n        Unitdict_rev: Returns a dictionary mapping unit IDs to unit names.\n        Objectdict: Returns a dictionary mapping object types to IDs.\n        Unitid: Returns the unit ID of the current SAP2000 model.\n        Units: Returns the unit name of the current SAP2000 model.\n        is_locked: Checks if the model is locked.\n\n\n    Methods:\n        createSap: Opens the SAP2000 program and initializes the API instance.\n        openSap: Starts the SAP2000 application and initializes a new model.\n        closeSap: Closes the SAP2000 program.\n        lockModel: Locks the current model.\n        unlockModel: Unlocks the current model.\n        getUnits: Logs and returns the units and unit ID of the current model.\n        setUnits: Sets the units of the current SAP2000 model.\n        getSapVersion: Logs and returns the current SAP2000 program version.\n        getProjectInfo: Logs the project information.\n        setProjectInfo: Sets the project information fields.\n        setDefaultProjectInfo: Sets the default project information.\n        getFileName: Logs and returns the file name of the current model.\n        getCoordSystem: Logs and returns the name of the present coordinate\n            system.\n        RefreshView: Refreshes the view window.\n\n    Example:\n        The following example demonstrates how to use the Saproject class:\n\n        ```python\n        from pathlib import Path\n        from Sap2000py import Saproject\n\n        Sap = Saproject()\n        Sap.openSap()\n        Sap.File.New_Blank()\n        Sap.File.Open(Path('.') / \"Test\" / \"Test.sdb\")\n\n        print(Sap.Units)\n        Sap.getUnits()\n\n        print(Sap.SapVersion)\n        Sap.getSapVersion()\n\n        Sap.setProjectInfo(field=\"Company Name\", value=\"Tongji University\")\n        Sap.setProjectInfo(\"Author\", \"Gou Lingyun\")\n        Sap.setProjectInfo(\"Email\", \"gulangyu@tongji.edu.cn\")\n        print(Sap.ProjectInfo)\n        Sap.getProjectInfo()\n\n        print(Sap.FileName)\n        Sap.getFileName()\n\n        print(Sap.CoordSystem)\n        Sap.getCoordSystem()\n\n        # Test setting units\n        Sap.setUnits(\"KN_m_E\")  # This will log an error as \"KN_m_E\" is not a supported unit\n        Sap.setUnits(\"KN_m_C\")  # This will successfully change the units to KN_m_C\n        ```\n    \"\"\"\n\n    def __init__(self, AttachToInstance: Literal[True, False] = True):\n        \"\"\"Initializes the Saproject instance.\n\n        Args:\n            AttachToInstance (bool): Whether to attach to an existing SAP2000\n                instance. Defaults to True.\n        \"\"\"\n        self.createSap(AttachToInstance)\n        from Sap2000py.SapDeal import (\n            SapFile,\n            SapDefinitions,\n            SapAssign,\n            SapAnalyze,\n            SapResults,\n        )\n\n        self.File = SapFile(self)\n        self.Define = SapDefinitions(self)\n        self.Assign = SapAssign(self)\n        self.Analyze = SapAnalyze(self)\n        self.Results = SapResults(self)\n        self.Scripts = SapScripts(self)\n\n    @classmethod\n    def new(cls, *args, **kwargs):\n        \"\"\"Creates a new instance of the Saproject class.\n\n        This method is used to create a new instance of the Saproject class\n        with the specified arguments and keyword arguments.\n\n        Returns:\n            Saproject: A new instance of the Saproject class.\n        \"\"\"\n        newinstance = object.__new__(cls)\n        newinstance.__init__(AttachToInstance = False)\n        return newinstance\n\n    @property\n    def SapVersion(self):\n        \"\"\"Gets the current SAP2000 program version.\"\"\"\n        return self._Model.GetVersion()[1]\n\n    @property\n    def ProjectInfo(self):\n        \"\"\"project information.\n\n        Returns:\n            ProjectInfo(dict): Dictionary containing project information fields and their\n                corresponding values.\n\n        Example:\n            ProjectInfo = {\n                \"Company Name\": \"Tongji University\",\n                \"Author\": \"Gou Lingyun\",\n                }\n        \"\"\"\n        projectInfo = self._Model.GetProjectInfo()\n        num_fields = projectInfo[0]\n        if num_fields:\n            ProjectInfoDict = dict(zip(projectInfo[1], projectInfo[2]))\n            if isinstance(projectInfo[3], dict):\n                ProjectInfoDict.update(projectInfo[3])\n            else:\n                logger.trace(\"No User Defined Info!\")\n            return ProjectInfoDict\n        else:\n            self.setDefaultProjectInfo()\n            return self.ProjectInfo\n\n    @property\n    def FilePath(self):\n        \"\"\"file path of the current model.\n\n        Returns:\n            FilePath(str): file path of the current model.\n        \"\"\"\n        return self._Model.GetModelFilepath()\n\n    @property\n    def FileName(self):\n        \"\"\"file name of the current model.\n\n        Returns:\n            FileName(str): file name of the current model.\n        \"\"\"\n        return self._Model.GetModelFilename()\n\n    @property\n    def CoordSystem(self):\n        \"\"\"name of the present coordinate system.\"\"\"\n        return self._Model.GetPresentCoordSystem()\n\n    @property\n    def Unitdict(self):\n        \"\"\"Dictionary mapping unit names to unit IDs.\"\"\"\n        return {\n            \"lb_in_F\": 1,\n            \"lb_ft_F\": 2,\n            \"Kip_in_F\": 3,\n            \"Kip_ft_F\": 4,\n            \"KN_mm_C\": 5,\n            \"KN_m_C\": 6,\n            \"Kgf_mm_C\": 7,\n            \"Kgf_m_C\": 8,\n            \"N_mm_C\": 9,\n            \"N_m_C\": 10,\n            \"Ton_mm_C\": 11,\n            \"Ton_m_C\": 12,\n            \"KN_cm_C\": 13,\n            \"Kgf_cm_C\": 14,\n            \"N_cm_C\": 15,\n            \"Ton_cm_C\": 16,\n        }\n\n    @property\n    def Unitdict_rev(self):\n        \"\"\"Reversed dictionary mapping unit IDs to unit names.\"\"\"\n        return {value: key for key, value in self.Unitdict.items()}\n\n    @property\n    def Objectdict(self):\n        \"\"\"Dictionary mapping object types to IDs.\"\"\"\n        return {\n            \"Point\": 1,\n            \"Frame\": 2,\n            \"Cable\": 3,\n            \"Tendon\": 4,\n            \"Area\": 5,\n            \"Solid\": 6,\n            \"Link\": 7,\n        }\n\n    @property\n    def Unitid(self):\n        \"\"\"unit ID of the current SAP2000 model.\"\"\"\n        return self._Model.GetDatabaseUnits()\n\n    @property\n    def Units(self):\n        \"\"\"unit name of the current SAP2000 model.\"\"\"\n        return self.Unitdict_rev[self.Unitid]\n\n    @property\n    def is_locked(self):\n        \"\"\"Checks if the model is locked.\"\"\"\n        return self._Model.GetModelIsLocked()\n\n    @property\n    def MaterialList(self):\n        return list(self._Model.PropMaterial.GetNameList()[1])\n\n    def createSap(\n        self,\n        AttachToInstance: Literal[True, False] = False,\n        SpecifyPath: Literal[True, False] = False,\n        ProgramPath: str = \"\",\n    ):\n        \"\"\"Create SAP2000 Object and Model Pointer\n\n        Using comtypes to create a SAP2000 object and model pointer. Default object is **\"SAP2000v1.Helper\"** and **\"\"CSI.SAP2000.API.SapObject\"\"**\n\n        Args:\n            AttachToInstance (bool): Attach to a running API instance if True.\n            SpecifyPath (bool): If True, the path to the SAP2000 program must\n                be specified.\n            ProgramPath (str): Path to the SAP2000 program if SpecifyPath is\n                True.\n        \"\"\"\n        helper = comtypes.client.CreateObject(\"SAP2000v1.Helper\")\n        helper = helper.QueryInterface(comtypes.gen.SAP2000v1.cHelper)\n        if AttachToInstance:\n            try:\n                sap_object = helper.GetObject(\"CSI.SAP2000.API.SapObject\")\n            except (OSError, AttributeError, comtypes.COMError):\n                logger.warning(\n                    \"No running API instance of the program found or failed to attach.\"\n                )\n                logger.info(\"Trying to open a new instance...\")\n                AttachToInstance = False\n            if sap_object is None:\n                AttachToInstance = False\n        if not AttachToInstance:\n            if SpecifyPath:\n                try:\n                    sap_object = helper.CreateObject(ProgramPath)\n                except (OSError, comtypes.COMError):\n                    logger.error(\n                        f\"Cannot start a new instance of the program from {ProgramPath}\"\n                    )\n                    sys.exit(-1)\n            else:\n                try:\n                    sap_object = helper.CreateObjectProgID(\"CSI.SAP2000.API.SapObject\")\n                except (OSError, comtypes.COMError):\n                    logger.error(\"Cannot start a new instance of the program.\")\n                    sys.exit(-1)\n        self._Object = sap_object\n        self._Model = sap_object.SapModel\n\n    def openSap(self):\n        \"\"\"Starts the SAP2000 application and initializes a new model.\"\"\"\n        self._Object.ApplicationStart()\n        self._Model = self._Object.SapModel\n        self._Model.InitializeNewModel()\n        self._Object.Visible = True\n\n    def closeSap(self):\n        \"\"\"Closes the SAP2000 program.\n\n        !!! note \"Caution!\"\n            Remember to save the model before closing the program.\n        \"\"\"\n        self._Object.ApplicationExit(True)\n        self._Object, self._Model = 0, 0\n\n    def lockModel(self):\n        \"\"\"Lock the current model.\"\"\"\n        ret = self._Model.SetModelIsLocked(True)\n        if ret == 0:\n            logger.success(\"Model Locked!\")\n        else:\n            logger.warning(\"Fail to lock the model!\")\n\n    def unlockModel(self):\n        \"\"\"Unlock the current model.\"\"\"\n        ret = self._Model.SetModelIsLocked(False)\n        if ret == 0:\n            logger.success(\"Model Unlocked!\")\n        else:\n            logger.warning(\"Fail to unlock the model!\")\n\n    def getUnits(self):\n        \"\"\"Logs and returns the units and unit ID of the current model.\"\"\"\n        logger.opt(colors=True).info(\n            f\"Current Unit is &lt;yellow&gt;{self.Units}&lt;/yellow&gt;, id = &lt;blue&gt;{self.Unitid}&lt;/blue&gt;\"\n        )\n        return self.Units\n\n    def setUnits(\n        self,\n        Unit: Literal[\n            \"KN_m_C\",\n            \"KN_cm_C\",\n            \"KN_mm_C\",\n            \"N_m_C\",\n            \"N_cm_C\",\n            \"N_mm_C\",\n            \"Kgf_m_C\",\n            \"Kgf_cm_C\",\n            \"Kgf_mm_C\",\n            \"Tonf_m_C\",\n            \"Tonf_cm_C\",\n            \"Tonf_mm_C\",\n            \"lb_in_F\",\n            \"lb_ft_F\",\n            \"Kip_in_F\",\n            \"Kip_ft_F\",\n        ],\n    ):\n        \"\"\"Sets the units of the current SAP2000 model.\n\n        Args:\n            Unit (str): The desired units to set. Must be one of the following:[\"KN_m_C\", \"KN_cm_C\", \"KN_mm_C\",\"N_m_C\", \"N_cm_C\", \"N_mm_C\",\"Kgf_m_C\", \"Kgf_cm_C\", \"Kgf_mm_C\",\"Tonf_m_C\", \"Tonf_cm_C\", \"Tonf_mm_C\",\"lb_in_F\", \"lb_ft_F\",\"Kip_in_F\", \"Kip_ft_F\"]\n\n        \"\"\"\n        if Unit not in self.Unitdict.keys():\n            logger.opt(colors=True).error(\n                f\"Unit &lt;yellow&gt;{Unit}&lt;/yellow&gt; is not supported! Must be one of these: &lt;cyan&gt;{list(self.Unitdict.keys())}&lt;/cyan&gt;\"\n            )\n            return\n        unitid = self.Unitdict[Unit]\n        if unitid == self._Model.GetPresentUnits():\n            logger.info(f\"Model Units is already {Unit}\")\n        else:\n            ret = self._Model.SetPresentUnits(unitid)\n            if ret == 0:\n                logger.opt(colors=True).success(\n                    f\"Model Units set as: &lt;yellow&gt;{Unit}&lt;/yellow&gt;\"\n                )\n            else:\n                logger.opt(colors=True).warning(\n                    f\"Fail to change Units to &lt;yellow&gt;{Unit}&lt;/yellow&gt;! Please check!\"\n                )\n\n    def getSapVersion(self):\n        \"\"\"Logs and returns the current SAP2000 program version.\n\n        Returns:\n            SapVersion(str): The current SAP2000 program version.\n        \"\"\"\n        logger.opt(colors=True).info(\n            f\"The current SAP2000 program version is: &lt;yellow&gt;{self.SapVersion}&lt;/yellow&gt;\"\n        )\n        return self.SapVersion\n\n    def getProjectInfo(self):\n        \"\"\"Logs the project information.\n\n        Returns:\n            ProjectInfo(dict): Dictionary containing project information fields and their\n                corresponding values.\n        \"\"\"\n        logger.info(f\"Project Information:{json.dumps(self.ProjectInfo, indent=4)}\")\n\n    def setProjectInfo(\n        self,\n        field: Literal[\n            \"Company Name\",\n            \"Client Name\",\n            \"Project Name\",\n            \"Project Number\",\n            \"Model Name\",\n            \"Model Description\",\n            \"Revision Number\",\n            \"Frame Type\",\n            \"Engineer\",\n            \"Checker\",\n            \"Supervisor\",\n            \"Issue Code\",\n            \"Design Code\",\n            \"UserDefined\",\n        ] = \"\",\n        value: str = \"\",\n        info_dict: dict = {},\n        show_log=True,\n    ):\n        \"\"\"Sets the project information.\n\n        Args:\n            field (str): The field name to set.\n            value (str): The value to set for the specified field.\n            info_dict (dict): A dictionary of field-value pairs to set.\n            show_log (bool): Whether to log the result of setting the info.\n\n        returns:\n            ret(int): 0 if success, 1 if fail.\n\n        Example:\n            ```python\n            from Sap2000py import Saproject\n            Sap = Saproject()\n            Sap.openSap()\n            Sap.File.New_Blank()\n            # use field and value\n            Sap.setProjectInfo(field=\"Company Name\", value=\"Tongji University\")\n\n            # use position arguments\n            Sap.setProjectInfo(\"Author\", \"Gou Lingyun\")\n\n            # use info_dict\n            self.setProjectInfo(info_dict={\n                \"Company Name\": \"Tongji University\",\n                \"Author\": \"Gou Lingyun\",\n                \"Sap2000 Version\": str(self.SapVersion),\n                \"Date\": str(datetime.today()),\n                \"Created By\": \"Sap2000py Module\",\n                \"Link\": \"https://github.com/ganansuan647/Sap2000py\"\n            }, show_log=False)\n            ```\n        \"\"\"\n        ret = self._Model.SetProjectInfo(field, value)\n\n        if info_dict:\n            ret = []\n            for key, value in info_dict.items():\n                ret.append(self.setProjectInfo(key, value, show_log=show_log))\n            ret = any(ret)\n\n        if show_log:\n            if ret == 0:\n                logger.opt(colors=True).success(\n                    f\"Project Information &lt;yellow&gt;{field}&lt;/yellow&gt; set as &lt;cyan&gt;{value}&lt;/cyan&gt;!\"\n                )\n            else:\n                logger.opt(colors=True).warning(\n                    f\"Fail to set Project Information &lt;yellow&gt;{field}&lt;/yellow&gt; as &lt;cyan&gt;{value}&lt;/cyan&gt;! Please check!\"\n                )\n        return ret\n\n    def setDefaultProjectInfo(self):\n        \"\"\"Sets the default project information.\"\"\"\n        self.setProjectInfo(\n            info_dict={\n                \"Company Name\": \"Tongji University\",\n                \"Author\": \"Gou Lingyun\",\n                \"Sap2000 Version\": str(self.SapVersion),\n                \"Date\": str(datetime.today()),\n                \"Created By\": \"Sap2000py Module\",\n                \"Link\": \"https://github.com/ganansuan647/Sap2000py\",\n            },\n            show_log=False,\n        )\n\n    def getFileName(self):\n        \"\"\"Logs and returns the file name of the current model.\n\n        Actually using property **FileName** to get the file name.\n\n        Returns:\n            FileName(str): The file name of the current model.\n        \"\"\"\n        path = Path(f\"{self.FileName}\")\n        logger.opt(colors=True).info(f\"The current model file name is: {path}\")\n        return self.FileName\n\n    def getCoordSystem(self):\n        \"\"\"Logs and returns the name of the present coordinate system.\n\n        Actually using property **CoordSystem** to get the coordinate system name.\n\n        Returns:\n            CoordSystem(str): The name of the present coordinate system.\n        \"\"\"\n        logger.opt(colors=True).info(\n            f\"The current coordinate system is: &lt;yellow&gt;{self.CoordSystem}&lt;/yellow&gt;\"\n        )\n        return self.CoordSystem\n\n    def RefreshView(self, Window: int = 0, Zoom: Literal[True, False] = False):\n        \"\"\"Refreshes the view window.\n\n        Args:\n            Window (int): Window number, or 0 to refresh all windows.\n            Zoom (bool): Whether to maintain the current zoom level. If False,\n                the view will return to the default zoom level.\n\n        Returns:\n            ret(int): 0 if success, 1 if fail.\n        \"\"\"\n        ret = self._Model.View.RefreshView(Window, Zoom)\n        return ret\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.CoordSystem","title":"<code>CoordSystem</code>  <code>property</code>","text":"<p>name of the present coordinate system.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.FileName","title":"<code>FileName</code>  <code>property</code>","text":"<p>file name of the current model.</p> <p>Returns:</p> Name Type Description <code>FileName</code> <code>str</code> <p>file name of the current model.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.FilePath","title":"<code>FilePath</code>  <code>property</code>","text":"<p>file path of the current model.</p> <p>Returns:</p> Name Type Description <code>FilePath</code> <code>str</code> <p>file path of the current model.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.Objectdict","title":"<code>Objectdict</code>  <code>property</code>","text":"<p>Dictionary mapping object types to IDs.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.ProjectInfo","title":"<code>ProjectInfo</code>  <code>property</code>","text":"<p>project information.</p> <p>Returns:</p> Name Type Description <code>ProjectInfo</code> <code>dict</code> <p>Dictionary containing project information fields and their corresponding values.</p> Example <p>ProjectInfo = {     \"Company Name\": \"Tongji University\",     \"Author\": \"Gou Lingyun\",     }</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.SapVersion","title":"<code>SapVersion</code>  <code>property</code>","text":"<p>Gets the current SAP2000 program version.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.Unitdict","title":"<code>Unitdict</code>  <code>property</code>","text":"<p>Dictionary mapping unit names to unit IDs.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.Unitdict_rev","title":"<code>Unitdict_rev</code>  <code>property</code>","text":"<p>Reversed dictionary mapping unit IDs to unit names.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.Unitid","title":"<code>Unitid</code>  <code>property</code>","text":"<p>unit ID of the current SAP2000 model.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.Units","title":"<code>Units</code>  <code>property</code>","text":"<p>unit name of the current SAP2000 model.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.is_locked","title":"<code>is_locked</code>  <code>property</code>","text":"<p>Checks if the model is locked.</p>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.RefreshView","title":"<code>RefreshView(Window=0, Zoom=False)</code>","text":"<p>Refreshes the view window.</p> <p>Parameters:</p> Name Type Description Default <code>Window</code> <code>int</code> <p>Window number, or 0 to refresh all windows.</p> <code>0</code> <code>Zoom</code> <code>bool</code> <p>Whether to maintain the current zoom level. If False, the view will return to the default zoom level.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>ret</code> <code>int</code> <p>0 if success, 1 if fail.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def RefreshView(self, Window: int = 0, Zoom: Literal[True, False] = False):\n    \"\"\"Refreshes the view window.\n\n    Args:\n        Window (int): Window number, or 0 to refresh all windows.\n        Zoom (bool): Whether to maintain the current zoom level. If False,\n            the view will return to the default zoom level.\n\n    Returns:\n        ret(int): 0 if success, 1 if fail.\n    \"\"\"\n    ret = self._Model.View.RefreshView(Window, Zoom)\n    return ret\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.__init__","title":"<code>__init__(AttachToInstance=True)</code>","text":"<p>Initializes the Saproject instance.</p> <p>Parameters:</p> Name Type Description Default <code>AttachToInstance</code> <code>bool</code> <p>Whether to attach to an existing SAP2000 instance. Defaults to True.</p> <code>True</code> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def __init__(self, AttachToInstance: Literal[True, False] = True):\n    \"\"\"Initializes the Saproject instance.\n\n    Args:\n        AttachToInstance (bool): Whether to attach to an existing SAP2000\n            instance. Defaults to True.\n    \"\"\"\n    self.createSap(AttachToInstance)\n    from Sap2000py.SapDeal import (\n        SapFile,\n        SapDefinitions,\n        SapAssign,\n        SapAnalyze,\n        SapResults,\n    )\n\n    self.File = SapFile(self)\n    self.Define = SapDefinitions(self)\n    self.Assign = SapAssign(self)\n    self.Analyze = SapAnalyze(self)\n    self.Results = SapResults(self)\n    self.Scripts = SapScripts(self)\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.closeSap","title":"<code>closeSap()</code>","text":"<p>Closes the SAP2000 program.</p> <p>Caution!</p> <p>Remember to save the model before closing the program.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def closeSap(self):\n    \"\"\"Closes the SAP2000 program.\n\n    !!! note \"Caution!\"\n        Remember to save the model before closing the program.\n    \"\"\"\n    self._Object.ApplicationExit(True)\n    self._Object, self._Model = 0, 0\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.createSap","title":"<code>createSap(AttachToInstance=False, SpecifyPath=False, ProgramPath='')</code>","text":"<p>Create SAP2000 Object and Model Pointer</p> <p>Using comtypes to create a SAP2000 object and model pointer. Default object is \"SAP2000v1.Helper\" and \"\"CSI.SAP2000.API.SapObject\"\"</p> <p>Parameters:</p> Name Type Description Default <code>AttachToInstance</code> <code>bool</code> <p>Attach to a running API instance if True.</p> <code>False</code> <code>SpecifyPath</code> <code>bool</code> <p>If True, the path to the SAP2000 program must be specified.</p> <code>False</code> <code>ProgramPath</code> <code>str</code> <p>Path to the SAP2000 program if SpecifyPath is True.</p> <code>''</code> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def createSap(\n    self,\n    AttachToInstance: Literal[True, False] = False,\n    SpecifyPath: Literal[True, False] = False,\n    ProgramPath: str = \"\",\n):\n    \"\"\"Create SAP2000 Object and Model Pointer\n\n    Using comtypes to create a SAP2000 object and model pointer. Default object is **\"SAP2000v1.Helper\"** and **\"\"CSI.SAP2000.API.SapObject\"\"**\n\n    Args:\n        AttachToInstance (bool): Attach to a running API instance if True.\n        SpecifyPath (bool): If True, the path to the SAP2000 program must\n            be specified.\n        ProgramPath (str): Path to the SAP2000 program if SpecifyPath is\n            True.\n    \"\"\"\n    helper = comtypes.client.CreateObject(\"SAP2000v1.Helper\")\n    helper = helper.QueryInterface(comtypes.gen.SAP2000v1.cHelper)\n    if AttachToInstance:\n        try:\n            sap_object = helper.GetObject(\"CSI.SAP2000.API.SapObject\")\n        except (OSError, AttributeError, comtypes.COMError):\n            logger.warning(\n                \"No running API instance of the program found or failed to attach.\"\n            )\n            logger.info(\"Trying to open a new instance...\")\n            AttachToInstance = False\n        if sap_object is None:\n            AttachToInstance = False\n    if not AttachToInstance:\n        if SpecifyPath:\n            try:\n                sap_object = helper.CreateObject(ProgramPath)\n            except (OSError, comtypes.COMError):\n                logger.error(\n                    f\"Cannot start a new instance of the program from {ProgramPath}\"\n                )\n                sys.exit(-1)\n        else:\n            try:\n                sap_object = helper.CreateObjectProgID(\"CSI.SAP2000.API.SapObject\")\n            except (OSError, comtypes.COMError):\n                logger.error(\"Cannot start a new instance of the program.\")\n                sys.exit(-1)\n    self._Object = sap_object\n    self._Model = sap_object.SapModel\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.getCoordSystem","title":"<code>getCoordSystem()</code>","text":"<p>Logs and returns the name of the present coordinate system.</p> <p>Actually using property CoordSystem to get the coordinate system name.</p> <p>Returns:</p> Name Type Description <code>CoordSystem</code> <code>str</code> <p>The name of the present coordinate system.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def getCoordSystem(self):\n    \"\"\"Logs and returns the name of the present coordinate system.\n\n    Actually using property **CoordSystem** to get the coordinate system name.\n\n    Returns:\n        CoordSystem(str): The name of the present coordinate system.\n    \"\"\"\n    logger.opt(colors=True).info(\n        f\"The current coordinate system is: &lt;yellow&gt;{self.CoordSystem}&lt;/yellow&gt;\"\n    )\n    return self.CoordSystem\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.getFileName","title":"<code>getFileName()</code>","text":"<p>Logs and returns the file name of the current model.</p> <p>Actually using property FileName to get the file name.</p> <p>Returns:</p> Name Type Description <code>FileName</code> <code>str</code> <p>The file name of the current model.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def getFileName(self):\n    \"\"\"Logs and returns the file name of the current model.\n\n    Actually using property **FileName** to get the file name.\n\n    Returns:\n        FileName(str): The file name of the current model.\n    \"\"\"\n    path = Path(f\"{self.FileName}\")\n    logger.opt(colors=True).info(f\"The current model file name is: {path}\")\n    return self.FileName\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.getProjectInfo","title":"<code>getProjectInfo()</code>","text":"<p>Logs the project information.</p> <p>Returns:</p> Name Type Description <code>ProjectInfo</code> <code>dict</code> <p>Dictionary containing project information fields and their corresponding values.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def getProjectInfo(self):\n    \"\"\"Logs the project information.\n\n    Returns:\n        ProjectInfo(dict): Dictionary containing project information fields and their\n            corresponding values.\n    \"\"\"\n    logger.info(f\"Project Information:{json.dumps(self.ProjectInfo, indent=4)}\")\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.getSapVersion","title":"<code>getSapVersion()</code>","text":"<p>Logs and returns the current SAP2000 program version.</p> <p>Returns:</p> Name Type Description <code>SapVersion</code> <code>str</code> <p>The current SAP2000 program version.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def getSapVersion(self):\n    \"\"\"Logs and returns the current SAP2000 program version.\n\n    Returns:\n        SapVersion(str): The current SAP2000 program version.\n    \"\"\"\n    logger.opt(colors=True).info(\n        f\"The current SAP2000 program version is: &lt;yellow&gt;{self.SapVersion}&lt;/yellow&gt;\"\n    )\n    return self.SapVersion\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.getUnits","title":"<code>getUnits()</code>","text":"<p>Logs and returns the units and unit ID of the current model.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def getUnits(self):\n    \"\"\"Logs and returns the units and unit ID of the current model.\"\"\"\n    logger.opt(colors=True).info(\n        f\"Current Unit is &lt;yellow&gt;{self.Units}&lt;/yellow&gt;, id = &lt;blue&gt;{self.Unitid}&lt;/blue&gt;\"\n    )\n    return self.Units\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.lockModel","title":"<code>lockModel()</code>","text":"<p>Lock the current model.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def lockModel(self):\n    \"\"\"Lock the current model.\"\"\"\n    ret = self._Model.SetModelIsLocked(True)\n    if ret == 0:\n        logger.success(\"Model Locked!\")\n    else:\n        logger.warning(\"Fail to lock the model!\")\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.new","title":"<code>new(*args, **kwargs)</code>  <code>classmethod</code>","text":"<p>Creates a new instance of the Saproject class.</p> <p>This method is used to create a new instance of the Saproject class with the specified arguments and keyword arguments.</p> <p>Returns:</p> Name Type Description <code>Saproject</code> <p>A new instance of the Saproject class.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>@classmethod\ndef new(cls, *args, **kwargs):\n    \"\"\"Creates a new instance of the Saproject class.\n\n    This method is used to create a new instance of the Saproject class\n    with the specified arguments and keyword arguments.\n\n    Returns:\n        Saproject: A new instance of the Saproject class.\n    \"\"\"\n    newinstance = object.__new__(cls)\n    newinstance.__init__(AttachToInstance = False)\n    return newinstance\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.openSap","title":"<code>openSap()</code>","text":"<p>Starts the SAP2000 application and initializes a new model.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def openSap(self):\n    \"\"\"Starts the SAP2000 application and initializes a new model.\"\"\"\n    self._Object.ApplicationStart()\n    self._Model = self._Object.SapModel\n    self._Model.InitializeNewModel()\n    self._Object.Visible = True\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.setDefaultProjectInfo","title":"<code>setDefaultProjectInfo()</code>","text":"<p>Sets the default project information.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def setDefaultProjectInfo(self):\n    \"\"\"Sets the default project information.\"\"\"\n    self.setProjectInfo(\n        info_dict={\n            \"Company Name\": \"Tongji University\",\n            \"Author\": \"Gou Lingyun\",\n            \"Sap2000 Version\": str(self.SapVersion),\n            \"Date\": str(datetime.today()),\n            \"Created By\": \"Sap2000py Module\",\n            \"Link\": \"https://github.com/ganansuan647/Sap2000py\",\n        },\n        show_log=False,\n    )\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.setProjectInfo","title":"<code>setProjectInfo(field='', value='', info_dict={}, show_log=True)</code>","text":"<p>Sets the project information.</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>str</code> <p>The field name to set.</p> <code>''</code> <code>value</code> <code>str</code> <p>The value to set for the specified field.</p> <code>''</code> <code>info_dict</code> <code>dict</code> <p>A dictionary of field-value pairs to set.</p> <code>{}</code> <code>show_log</code> <code>bool</code> <p>Whether to log the result of setting the info.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>ret</code> <code>int</code> <p>0 if success, 1 if fail.</p> Example <pre><code>from Sap2000py import Saproject\nSap = Saproject()\nSap.openSap()\nSap.File.New_Blank()\n# use field and value\nSap.setProjectInfo(field=\"Company Name\", value=\"Tongji University\")\n\n# use position arguments\nSap.setProjectInfo(\"Author\", \"Gou Lingyun\")\n\n# use info_dict\nself.setProjectInfo(info_dict={\n    \"Company Name\": \"Tongji University\",\n    \"Author\": \"Gou Lingyun\",\n    \"Sap2000 Version\": str(self.SapVersion),\n    \"Date\": str(datetime.today()),\n    \"Created By\": \"Sap2000py Module\",\n    \"Link\": \"https://github.com/ganansuan647/Sap2000py\"\n}, show_log=False)\n</code></pre> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def setProjectInfo(\n    self,\n    field: Literal[\n        \"Company Name\",\n        \"Client Name\",\n        \"Project Name\",\n        \"Project Number\",\n        \"Model Name\",\n        \"Model Description\",\n        \"Revision Number\",\n        \"Frame Type\",\n        \"Engineer\",\n        \"Checker\",\n        \"Supervisor\",\n        \"Issue Code\",\n        \"Design Code\",\n        \"UserDefined\",\n    ] = \"\",\n    value: str = \"\",\n    info_dict: dict = {},\n    show_log=True,\n):\n    \"\"\"Sets the project information.\n\n    Args:\n        field (str): The field name to set.\n        value (str): The value to set for the specified field.\n        info_dict (dict): A dictionary of field-value pairs to set.\n        show_log (bool): Whether to log the result of setting the info.\n\n    returns:\n        ret(int): 0 if success, 1 if fail.\n\n    Example:\n        ```python\n        from Sap2000py import Saproject\n        Sap = Saproject()\n        Sap.openSap()\n        Sap.File.New_Blank()\n        # use field and value\n        Sap.setProjectInfo(field=\"Company Name\", value=\"Tongji University\")\n\n        # use position arguments\n        Sap.setProjectInfo(\"Author\", \"Gou Lingyun\")\n\n        # use info_dict\n        self.setProjectInfo(info_dict={\n            \"Company Name\": \"Tongji University\",\n            \"Author\": \"Gou Lingyun\",\n            \"Sap2000 Version\": str(self.SapVersion),\n            \"Date\": str(datetime.today()),\n            \"Created By\": \"Sap2000py Module\",\n            \"Link\": \"https://github.com/ganansuan647/Sap2000py\"\n        }, show_log=False)\n        ```\n    \"\"\"\n    ret = self._Model.SetProjectInfo(field, value)\n\n    if info_dict:\n        ret = []\n        for key, value in info_dict.items():\n            ret.append(self.setProjectInfo(key, value, show_log=show_log))\n        ret = any(ret)\n\n    if show_log:\n        if ret == 0:\n            logger.opt(colors=True).success(\n                f\"Project Information &lt;yellow&gt;{field}&lt;/yellow&gt; set as &lt;cyan&gt;{value}&lt;/cyan&gt;!\"\n            )\n        else:\n            logger.opt(colors=True).warning(\n                f\"Fail to set Project Information &lt;yellow&gt;{field}&lt;/yellow&gt; as &lt;cyan&gt;{value}&lt;/cyan&gt;! Please check!\"\n            )\n    return ret\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.setUnits","title":"<code>setUnits(Unit)</code>","text":"<p>Sets the units of the current SAP2000 model.</p> <p>Parameters:</p> Name Type Description Default <code>Unit</code> <code>str</code> <p>The desired units to set. Must be one of the following:[\"KN_m_C\", \"KN_cm_C\", \"KN_mm_C\",\"N_m_C\", \"N_cm_C\", \"N_mm_C\",\"Kgf_m_C\", \"Kgf_cm_C\", \"Kgf_mm_C\",\"Tonf_m_C\", \"Tonf_cm_C\", \"Tonf_mm_C\",\"lb_in_F\", \"lb_ft_F\",\"Kip_in_F\", \"Kip_ft_F\"]</p> required Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def setUnits(\n    self,\n    Unit: Literal[\n        \"KN_m_C\",\n        \"KN_cm_C\",\n        \"KN_mm_C\",\n        \"N_m_C\",\n        \"N_cm_C\",\n        \"N_mm_C\",\n        \"Kgf_m_C\",\n        \"Kgf_cm_C\",\n        \"Kgf_mm_C\",\n        \"Tonf_m_C\",\n        \"Tonf_cm_C\",\n        \"Tonf_mm_C\",\n        \"lb_in_F\",\n        \"lb_ft_F\",\n        \"Kip_in_F\",\n        \"Kip_ft_F\",\n    ],\n):\n    \"\"\"Sets the units of the current SAP2000 model.\n\n    Args:\n        Unit (str): The desired units to set. Must be one of the following:[\"KN_m_C\", \"KN_cm_C\", \"KN_mm_C\",\"N_m_C\", \"N_cm_C\", \"N_mm_C\",\"Kgf_m_C\", \"Kgf_cm_C\", \"Kgf_mm_C\",\"Tonf_m_C\", \"Tonf_cm_C\", \"Tonf_mm_C\",\"lb_in_F\", \"lb_ft_F\",\"Kip_in_F\", \"Kip_ft_F\"]\n\n    \"\"\"\n    if Unit not in self.Unitdict.keys():\n        logger.opt(colors=True).error(\n            f\"Unit &lt;yellow&gt;{Unit}&lt;/yellow&gt; is not supported! Must be one of these: &lt;cyan&gt;{list(self.Unitdict.keys())}&lt;/cyan&gt;\"\n        )\n        return\n    unitid = self.Unitdict[Unit]\n    if unitid == self._Model.GetPresentUnits():\n        logger.info(f\"Model Units is already {Unit}\")\n    else:\n        ret = self._Model.SetPresentUnits(unitid)\n        if ret == 0:\n            logger.opt(colors=True).success(\n                f\"Model Units set as: &lt;yellow&gt;{Unit}&lt;/yellow&gt;\"\n            )\n        else:\n            logger.opt(colors=True).warning(\n                f\"Fail to change Units to &lt;yellow&gt;{Unit}&lt;/yellow&gt;! Please check!\"\n            )\n</code></pre>"},{"location":"Sap2000py/Saproject/Saproject/#Saproject.Saproject.unlockModel","title":"<code>unlockModel()</code>","text":"<p>Unlock the current model.</p> Source code in <code>Sap2000py/Saproject.py</code> <pre><code>def unlockModel(self):\n    \"\"\"Unlock the current model.\"\"\"\n    ret = self._Model.SetModelIsLocked(False)\n    if ret == 0:\n        logger.success(\"Model Unlocked!\")\n    else:\n        logger.warning(\"Fail to unlock the model!\")\n</code></pre>"},{"location":"about/author/","title":"\u82df\u51cc\u4e91 (Lingyun Gou)","text":""},{"location":"about/author/#_1","title":"\ud83c\udf93 \u6559\u80b2\u80cc\u666f","text":"<ul> <li>\u540c\u6d4e\u5927\u5b66 \u5b66\u58eb 2018-2022</li> <li>\u540c\u6d4e\u5927\u5b66 \u7855\u58eb 2022-2024</li> <li>\u540c\u6d4e\u5927\u5b66 \u535a\u58eb\u751f 2024-</li> <li>\u4e3b\u8981\u7814\u7a76\u9886\u57df\uff1a\u6865\u6881\u6297\u9707\u53ca\u591a\u707e\u5bb3\u8026\u5408\u4f5c\u7528\u4e0b\u7684\u6865\u6881\u53d7\u707e\u673a\u7406</li> </ul>"},{"location":"about/author/#_2","title":"\ud83d\udd2c \u7814\u7a76\u65b9\u5411","text":"<ul> <li>\u6865\u6881\u7ed3\u6784\u7684\u6297\u9707\u6027\u80fd\u5206\u6790</li> <li>\u591a\u707e\u5bb3\u8026\u5408\u6210\u707e\u53ca\u81f4\u707e\u673a\u7406</li> </ul>"},{"location":"about/author/#_3","title":"\ud83d\udcda \u7814\u7a76\u6210\u679c","text":"<p>[1] \u82df\u51cc\u4e91, \u738b\u6653\u4f1f, \u53f6\u7231\u541b. \u8f6f\u571f\u5730\u57fa\u6865\u6881\u6869\u57fa\u7840\u8bbe\u8ba1\u5730\u9707\u529b\u7b80\u5316\u8ba1\u7b97\u65b9\u6cd5[J]. \u5de5\u7a0b\u529b\u5b66.DOI:10.6052/j.issn.1000-4750.2024.05.0381</p>"},{"location":"about/author/#_4","title":"\ud83d\udce7 \u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u90ae\u7bb1: gulangyu@tongji.edu.cn</li> </ul>"},{"location":"about/author/#_5","title":"\ud83d\udee0\ufe0f \u5176\u4ed6\u9879\u76ee","text":"<ul> <li>EZSite_with_Openseespy:\u5229\u7528Openseespy\u5feb\u901f\u5efa\u7acb\u573a\u5730-\u7ed3\u6784\u4e00\u4f53\u5316\u6a21\u578b\u5e76\u8fdb\u884c\u5730\u9707\u5206\u6790</li> <li>openseespy_zh_totorial:\u4e2d\u6587\u7248openseespy\u6559\u7a0b</li> <li>Classification Explorer:\u8f7b\u91cf\u7ea7\u53ef\u89c6\u5316APP,\u76f4\u89c2\u5c55\u793a\u53c2\u6570\u5bf9\u5206\u7c7b\u5668\u6027\u80fd\u5f71\u54cd\uff0c\u91c7\u7528dash\u7f16\u5199</li> </ul>"},{"location":"about/project/","title":"\u529f\u80fd\u9884\u671f","text":"<p>\u9879\u76ee\u76ee\u6807</p> <p>\u51cf\u5c11\u4f7f\u7528Sap2000\u8ba1\u7b97\u548c\u9a8c\u7b97\u8fc7\u7a0b\u4e2d\u7684\u91cd\u590d\u64cd\u4f5c\uff0c\u63d0\u9ad8\u6a2a\u5411\u9879\u76ee\u7684\u5de5\u4f5c\u6548\u7387\u3002</p> <ul> <li> CSI OAPI\u7684\u57fa\u672c\u4f7f\u7528</li> <li> \u7b80\u5355\u6865\u6881\u6a21\u578b\u7684\u5efa\u7acb<ul> <li> \u4e3b\u6881</li> <li> \u652f\u5ea7:<ul> <li> \u7406\u60f3\u652f\u5ea7</li> <li> MultiLinearElastic(\u6ce8\u610f\u6b64\u652f\u5ea7\u65e0\u6ede\u56de\u6027\u8d28\uff0c\u672c\u6784\u66f2\u7ebf\u539f\u8def\u8fd4\u56de)</li> <li> PlasticWen(\u6469\u64e6\u6446\uff0c\u94a2\u963b\u5c3c\u5668\u7b49)</li> </ul> </li> <li> \u6865\u58a9:<ul> <li> \u5747\u5300\u81ea\u5b9a\u4e49\u58a9(\u5efa\u8bae\u7528\u6237\u81ea\u884c\u5b9e\u73b0)</li> <li> \u7bb1\u58a9</li> <li> \u5176\u4ed6\u5e38\u89c1\u7684\u58a9</li> </ul> </li> <li> \u57fa\u7840:<ul> <li> \u516d\u5f39\u7c27</li> <li> Winkler\u5730\u57fa\u6881</li> </ul> </li> </ul> </li> <li> \u5de5\u51b5\u8bbe\u7f6e\u3001\u5206\u7ec4\u3001\u8ba1\u7b97<ul> <li> \u53cd\u5e94\u8c31\u51fd\u6570\uff0c\u963b\u5c3c\u6bd4\uff0c\u65b9\u5411\uff0c\u5de5\u51b5\u5b9a\u4e49\uff0c\u4ecetxt\u8bfb\u53d6\u53cd\u5e94\u8c31\u7b49\u529f\u80fd\uff0c\u8be6\u89c1<code>SapEarthquake.Spectrum</code>\u7c7b\u53ca<code>SapEarthquake.SapSpectrumCase</code>\u7c7b</li> <li> \u65f6\u7a0b\u51fd\u6570\uff0c\u963b\u5c3c\u6bd4\uff0c\u65b9\u5411\uff0c\u5de5\u51b5\u5b9a\u4e49\uff0c\u652f\u6301\u76f4\u63a5\u79ef\u5206\u6cd5\uff08DirTH\uff09\u548c\u6a21\u6001\u53e0\u52a0\u6cd5\uff08Modal\uff09\uff0c\u8be6\u89c1<code>SapEarthquake.SapTimeHistoryFunc</code>\u7c7b\u53ca<code>SapEarthquake.SapModalTimeHistoryCase</code>\u7c7b</li> <li> \u5c06\u8282\u70b9\uff0c\u5355\u5143\uff0clink\u7b49\u6dfb\u52a0\u5230\u6307\u5b9a\u7ec4\uff08Group\uff09,\u8be6\u89c1<code>Sap.Scripts.Group</code>\u7c7b</li> <li> \u63d0\u53d6\u7ed3\u679c\u65f6\u9009\u62e9\u6307\u5b9a\u7ec4\u522b\uff0c\u8be6\u89c1<code>Saproject.Scripts.SelectCombo_Case</code>\u65b9\u6cd5</li> <li> \u9009\u62e9\u5de5\u51b5\u5e76\u8ba1\u7b97\uff0c\u8ba1\u7b97\u5931\u8d25\u65f6\u53ef\u4ee5\u81ea\u52a8\u91cd\u7b97\uff0c\u8be6\u89c1<code>Saproject.Scripts.Analyze</code>\u7c7b</li> </ul> </li> <li> \u7ed3\u679c\u63d0\u53d6\uff0c\u8f93\u51fa\u81f3Excel</li> <li> \u81ea\u52a8\u8fdb\u884c\u622a\u9762\u9a8c\u7b97\uff0c\u7ed9\u51fa\u5efa\u8bae\u914d\u7b4b\u7387</li> <li> \u81ea\u52a8\u751f\u6210\u62a5\u544a</li> </ul>"},{"location":"about/project/#_2","title":"\u53c2\u8003\u8d44\u6599","text":"<ul> <li>\u5b98\u65b9API\u6587\u6863\u6765\u81ea\u4e8eSap2000\u5b89\u88c5\u76ee\u5f55\u4e2d\u7684CSI_OAPI_Documentation.chm(\u8fd9\u91cc\u7ed9\u51fa\u7684\u662fv25\u7248\u672c)</li> <li>\u90e8\u5206\u4ee3\u7801\u91cd\u6784\u81ea\u90ed\u519b\u519b\u7684\u9879\u76eepythonInteractSAP2000</li> </ul> <p>\u5f00\u6e90\u534f\u8bae</p> <p>\u672c\u9879\u76ee\u9075\u5faaGPL-3.0 license\u5f00\u6e90\u534f\u8bae\uff0c\u6b22\u8fce\u5927\u5bb6\u63d0\u51fa\u5efa\u8bae\u548c\u8d21\u732e\u4ee3\u7801\u3002</p>"}]}